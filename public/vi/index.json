[{"uri":"/vi/2-prerequiste/2.1-code-clone/","title":"Clone Mã Nguồn","tags":[],"description":"","content":"Tổng quan Dự án CloudTalkr đã được lập trình sẵn và lưu trữ trên GitHub. Việc clone mã nguồn về máy giúp bạn có thể chỉnh sửa, cài đặt và chạy thử ứng dụng trên môi trường cục bộ (localhost).\nMã nguồn bao gồm đầy đủ các thành phần: frontend, backend, cấu hình Prisma, ảnh, sơ đồ hệ thống, và các file cấu hình triển khai AWS.\n👉 Kho lưu trữ chính: Nội dung Mở Terminal, Git Bash, hoặc Command Prompt (nếu dùng Windows).\nThực hiện lệnh sau để clone toàn bộ mã nguồn về máy:\ngit clone https://github.com/nhat3107/CloudTalkr.git "},{"uri":"/vi/1-introduce/1.1-projecttopic/","title":"Đề tài","tags":[],"description":"","content":"Dự án này tập trung vào việc xây dựng một ứng dụng web Chat \u0026amp; Video Streaming thời gian thực sử dụng MERN Stack trên hạ tầng AWS để đảm bảo khả năng triển khai nhanh, mở rộng linh hoạt và độ tin cậy cao.\nCác Tính Năng Chính Đăng ký, đăng nhập và quản lý tài khoản với hệ thống xác thực an toàn\nGửi và nhận tin nhắn thời gian thực trong các cuộc trò chuyện 1:1 hoặc nhóm thông qua GetStream.io\nTạo và tham gia các phiên phát video trực tiếp với độ trễ thấp\nTải lên và quản lý ảnh/video nhờ lưu trữ đám mây qua Cloudinary\nTrải nghiệm giao diện người dùng hiện đại, thân thiện và tương thích với nhiều thiết bị\nHợp tác trực tuyến theo thời gian thực với dữ liệu được đồng bộ hóa tự động\nỨng dụng được thiết kế hoàn toàn trên nền web, tối ưu cho trình duyệt hiện đại và dễ dàng mở rộng khi triển khai trên nền tảng điện toán đám mây.\nCông Nghệ và Dịch Vụ Chính Được Sử Dụng Frontend:\n👉 React.js 👉 Tailwind CSS + DaisyUI 👉 GetStream.io (chat \u0026amp; video thời gian thực) Backend:\n👉 Node.js + Express.js 👉 Prisma ORM Cơ Sở Dữ Liệu:\n👉 MongoDB Atlas Quản Lý Media:\n👉 Cloudinary (CDN hình ảnh và video) CI/CD và Triển Khai Trên Cloud – Dịch Vụ AWS:\n👉 AWS Amplify (CI/CD cho frontend React) 👉 AWS EC2 (host server backend) 👉 AWS API Gateway "},{"uri":"/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"📘 Giới thiệu tổng quan Dự án này hướng đến việc xây dựng một ứng dụng web thời gian thực hỗ trợ trò chuyện và truyền phát video, sử dụng MERN Stack (MongoDB, Express.js, React.js, Node.js). Hệ thống không chỉ tập trung vào trải nghiệm người dùng trực quan, tốc độ nhanh mà còn đảm bảo khả năng mở rộng, triển khai liên tục và vận hành ổn định thông qua các dịch vụ đám mây hiện đại của AWS.\nỨng dụng được triển khai theo kiến trúc Client – Server – Cloud, nơi frontend và backend được phát triển tách biệt, nhưng hoạt động thống nhất nhờ tích hợp API, công cụ thời gian thực (GetStream).\nCụ thể:\n1.1 Chủ đề dự án 1.2 Các công nghệ và công cụ phát triển 1.3 Dịch vụ AWS 1.4 Kiến trúc hệ thống Tổng thể, dự án không chỉ là một sản phẩm web hiện đại về mặt công nghệ mà còn là một hệ thống hoàn chỉnh, linh hoạt và sẵn sàng cho môi trường vận hành thực tế quy mô lớn.\n"},{"uri":"/vi/5-ec2/5.1-launchec2/","title":"Khởi Chạy EC2","tags":[],"description":"","content":"Cấu hình Instance Truy cập EC2 Dashboard\nTìm kiếm dịch vụ EC2\nChọn EC2 từ kết quả tìm kiếm Khởi chạy một Instance mới\nChọn Instances từ menu bên trái\nNhấn Launch instances Đặt tên cho Instance\nTrong mục Name and tags, nhập cloudtalkr-server Chọn Amazon Machine Image (AMI)\nChọn Quick Start\nChọn Amazon Linux 2023 kernel-6.1\nChọn phiên bản AMI phù hợp Cấu hình Loại Instance và Key Pair\nChọn Instance type phù hợp\nNhấn Create new key pair Tạo Key Pair mới\nKey pair name: cloudtalkr-keypair\nKey pair type: Chọn RSA\nPrivate key format: Chọn .pem Cấu hình Mạng Cấu hình Network\nVPC: Chọn CloudTalkr-VPC\nSubnet: Chọn Public Subnet 1\nAuto-assign public IP: Chọn Enable\nSecurity Group: Chọn Create Security Group\nSecurity Group Name: CloudTalkr-sg\nDescription: CloudTalkr Security Group\nĐảm bảo thiết lập các Inbound Rules cần thiết\nNhớ mở Custom TCP cho PORT 3000 từ 0.0.0.0: chỉ dùng cho lab/test, nguy hiểm khi dùng môi trường production\nNhấn Launch instance Xác nhận Instance đã được khởi tạo thành công Kết nối Truy cập dịch vụ EC2:\nCó nhiều công cụ khác nhau có thể dùng để kết nối, nhưng trong bài lab này sử dụng MobaXterm.\nHướng dẫn sử dụng MobaXterm tại đây\nChọn Instances\nChọn cloudtalkr-server Sao chép Public IP và kết nối đến Instance này "},{"uri":"/vi/4-networking/4.1-vpc/","title":"VPC","tags":[],"description":"","content":"Mục tiêu Tạo một môi trường mạng ảo riêng biệt trong AWS Xác định dải địa chỉ IP cho VPC Cấu hình các tính năng DNS cơ bản Hướng dẫn Truy cập AWS Management Console\nTìm kiếm dịch vụ VPC Chọn VPC từ kết quả tìm kiếm\nTrong VPC Dashboard\nChọn Your VPCs từ menu bên trái Nhấn Create VPC\nCấu hình thông số VPC\nResources: Chọn VPC only Name tag: Nhập CloudTalkr-VPC IPv4 CIDR: Nhập 10.0.0.0/16 Giữ nguyên tùy chọn Tenancy là Default. Chuyển sang Dedicated có thể giới hạn loại EC2 Instance được hỗ trợ trong VPC này.\nXác nhận tạo VPC\nNhấn Create VPC để hoàn tất\nKiểm tra trạng thái VPC sau khi tạo\nBật các tính năng DNS cho VPC\nNhấn Edit VPC settings Chuyển sang tab DNS settings Bật DNS hostnames và DNS resolution Lưu thay đổi\n"},{"uri":"/vi/","title":"Phát Triển và Triển Khai","tags":[],"description":"","content":"Xây dựng Ứng dụng Chat \u0026amp; Video Streaming Thời Gian Thực bằng MERN Stack và Triển khai trên AWS Mục Tiêu Dự Án Dự án này nhằm xây dựng một ứng dụng chat và video streaming thời gian thực sử dụng MERN Stack, đồng thời triển khai trên hạ tầng AWS. Ứng dụng kết hợp giao diện người dùng hiện đại với khả năng giao tiếp thời gian thực và triển khai an toàn trên nền tảng đám mây.\nCông Nghệ Sử Dụng 🧑‍💻 Stack Phát Triển – MERN Frontend:\nReact.js\nTailwind CSS, DaisyUI\nGetStream.io (xử lý chat và video thời gian thực)\nBackend:\nNode.js + Express.js\nPrisma ORM\nMongoDB Atlas (cơ sở dữ liệu đám mây)\nCloudinary (lưu trữ và phân phối media)\n☁️ Stack Triển Khai – Dịch Vụ AWS CI/CD cho Frontend:\nAWS Amplify – Tự động build, deploy và host giao diện React từ GitHub. Backend:\nEC2 – Tự động build và triển khai backend Express.js lên Amazon EC2. 📂 Quản Lý Mã Nguồn GitHub – Quản lý source code và kích hoạt các quy trình CI/CD. Kết Quả Mong Đợi Một ứng dụng chat và video thời gian thực hoạt động đầy đủ.\nGiao diện người dùng hiện đại, mượt mà và phản hồi tốt trên mọi thiết bị.\nMột kiến trúc cloud-native có khả năng mở rộng cao, dễ bảo trì và nâng cấp trong tương lai.\nNội dung Giới thiệu Các bước chuẩn bị Tạo Budget Networking Amplify CodePipeline Kết quả đạt được Dọn dẹp tài nguyên "},{"uri":"/vi/2-prerequiste/","title":"Các bước chuẩn bị","tags":[],"description":"","content":"Tổng quan Trước khi chạy ứng dụng CloudTalkr, bạn cần chuẩn bị đầy đủ công cụ, thư viện và cấu hình môi trường cần thiết cho cả frontend và backend. Mục này hướng dẫn từng bước cài đặt và cấu hình trên máy tính cá nhân.\nDanh sách từng bước ✅ 2.1 – Clone the Source Code Sử dụng lệnh git clone để tải toàn bộ mã nguồn từ GitHub. Kho lưu trữ: 👉 https://github.com/nhat3107/CloudTalkr ✅ 2.2 – Cài đặt Node.js Cần thiết để chạy frontend (Reactjs) và backend (ExpressJs). Tự động cài đặt kèm công cụ quản lý thư viện npm. ✅ 2.3 – Cài đặt Visual Studio Code IDE được khuyến nghị để viết và quản lý mã nguồn. Cài thêm các tiện ích mở rộng như Markdown, JavaScript/TypeScript, Prisma,\u0026hellip; ✅ 2.4 – Cài đặt Postman Công cụ kiểm thử các API (GET, POST, PUT, DELETE). Cho phép gửi token xác thực để kiểm tra quyền truy cập API. ✅ 2.5 – Chuẩn Bị MongoDB Hệ cơ sở dữ liệu của hệ thống. ✅ 2.6 – Install Cloudinary Kênh phân phối nội dung (CDN) cho hệ thống ✅ 2.7 – Chuẩn Bị Getsream Dịch vụ cung cấp APIs and SDKs để xây dựng hệ thống có thể mở rộng (scalable), thời gian thực(real-time) chat, và stream video. 👉 Sau khi hoàn tất các bước trên, bạn có thể tiếp tục với phần cấu hình dự án, thiết lập cơ sở dữ liệu và triển khai hệ thống.\n"},{"uri":"/vi/1-introduce/1.2-technologiesandtools/","title":"Công Nghệ Và Công Cụ Phát Triển","tags":[],"description":"","content":"🖥️ Frontend React.js: Thư viện JavaScript hiện đại để xây dựng giao diện người dùng nhanh, tương tác cao.\nTailwind CSS + DaisyUI: Framework CSS dạng tiện ích kết hợp với thư viện UI giúp tạo giao diện đẹp, phản hồi tốt với tốc độ cao.\nGetStream.io: Dịch vụ SDK/API mạnh mẽ hỗ trợ xây dựng tính năng nhắn tin và video thời gian thực với ít logic backend.\nReact Router: Quản lý định tuyến động trong ứng dụng SPA (Single Page Application).\nAxios: Giao tiếp giữa frontend và backend thông qua HTTP request.\n⚙️ Backend Node.js \u0026amp; Express.js: Xây dựng server backend nhẹ, linh hoạt để xử lý API, xác thực và logic chat.\nPrisma ORM: Hỗ trợ truy vấn MongoDB dễ hiểu, an toàn kiểu dữ liệu, dễ bảo trì.\nMongoDB Atlas: Cơ sở dữ liệu NoSQL trên nền tảng đám mây, tự động mở rộng và lưu trữ dữ liệu người dùng, tin nhắn, phiên video,\u0026hellip;\nCloudinary: Lưu trữ và phân phối hình ảnh/video hiệu quả thông qua CDN, giảm tải cho server backend.\n☁️ Hạ tầng Đám mây \u0026amp; CI/CD (AWS) AWS Amplify: Triển khai tự động CI/CD cho frontend React – từ commit đến production.\nAmazon EC2: Triển khai server Node.js backend, có toàn quyền kiểm soát môi trường hoạt động.\nAWS API Gateway: Quản lý và định tuyến các yêu cầu API giữa frontend và backend, đảm bảo API hoạt động an toàn, có khả năng mở rộng và được giám sát.\n🧪 Công Cụ Phát Triển Postman: Kiểm thử các API, mô phỏng giao tiếp giữa frontend và backend.\nMongoDB Atlas: Công cụ giao diện để truy vấn và quản lý MongoDB trực quan.\nGitHub: Lưu trữ mã nguồn, quản lý phiên bản và tích hợp CI/CD.\nVisual Studio Code: Trình soạn thảo mã mạnh mẽ, hỗ trợ plugin cho React, Node.js,\u0026hellip;\n"},{"uri":"/vi/4-networking/4.2-subnet/","title":"Subnet","tags":[],"description":"","content":"Tổng quan Subnet là một phân đoạn mạng nhỏ hơn bên trong VPC Cho phép phân bổ tài nguyên trên các Availability Zones (AZ) Hướng dẫn Truy cập dịch vụ VPC\nChọn Subnets từ menu bên trái Nhấn Create subnet\nChọn VPC\nTrong màn hình Create subnet Chọn VPC CloudTalkr-VPC đã tạo trước đó Cấu hình subnet đầu tiên\nSubnet name: Nhập Public Subnet 1 Availability Zone: Chọn ap-southeast-1a IPv4 CIDR block: Nhập 10.0.0.0/24 Nhấn Create subnet\nXác nhận subnet đã được tạo thành công\nAvailability Zone (AZ): Tên hiển thị dễ đọc (ví dụ: ap-southeast-1a)\nAZ ID: Mã định danh thực tế của AZ\nAWS ánh xạ tên AZ sang AZ ID khác nhau cho từng tài khoản để phân bổ tài nguyên đồng đều hơn.\n"},{"uri":"/vi/5-ec2/5.2-deployingbackend/","title":"Triển khai Backend","tags":[],"description":"","content":"Chuẩn bị môi trường Cài đặt NVM (Node Version Manager). curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | Reload shell để dùng nvm: . ~/.nvm/nvm.sh Cài đặt phiên bản mới nhất của Node.js: nvm install node Kiểm tra phiên bản: node -v npm -v cài Đặt Git và Clone Code Update hệ thống and cài đặt Git: sudo yum update -y sudo yum install git -y Kiểm tra phiên bản:\ngit --version Clone source code từ GitHub: git clone https://github.com/nhat3107/CloudTalkr.git Di chuyển tới thư mục backend: ls cd CloudTalkr/backend Cài Đặt và Chạy Server Cài đặt npm packages cho backend: npm i Tạo file .env - Dán các the API keys, Database Url,\u0026hellip; Chạy server dùng file .env vừa tạo: npm run start Cài đặt PM2 để quản lý NodeJs processes: npm i pm2 -g Bật PM2 auto-start trên system boot bằng câu lệnh: pm2 startup Dán phần hiện ra vào terminal của EC2 và chạy.\nChạy server bằng PM2, kiểm tra status, và monitor:\npm2 start ecosystem.config.cjs pm2 status pm2 monit Dừng và xóa tất cả PM2 processes hiện tại: pm2 stop all pm2 delete all Khởi động lại server bằng config: pm2 start ecosystem.config.cjs Kiểm tra API "},{"uri":"/vi/2-prerequiste/2.2-install-nodejs/","title":"Cài đặt Nodejs","tags":[],"description":"","content":"Tổng quan Node.js là một môi trường chạy JavaScript phía máy chủ, được sử dụng để xây dựng backend của hệ thống trong đề tài này. Dự án backend sử dụng NodeJs kết hợp với Express để xử lý các API và kết nối cơ sở dữ liệu.\nCùng với Node.js, hệ thống còn cần npm (Node Package Manager) – công cụ giúp quản lý và cài đặt các thư viện cần thiết cho cả frontend và backend.\nCả frontend (ReactJs) và backend (ExpressJs) trong dự án đều yêu cầu cài đặt NodeJs để chạy và phát triển.\nNội dung Truy cập trang tải chính thức của Node.js: https://nodejs.org/en\nChọn bản ổn định (LTS – Long Term Support) phù hợp với hệ điều hành:\nWindows: .msi installer\nmacOS: .pkg installer\nLinux: chọn phiên bản tương ứng với bản phân phối\nTải xuống và cài đặt như phần mềm thông thường (Next → Next → Install\u0026hellip;).\nKiểm tra cài đặt bằng cách mở terminal hoặc Command Prompt và nhập:\nnode -v npm -v "},{"uri":"/vi/1-introduce/1.3-awsservices/","title":"Dịch Vụ Của AWS","tags":[],"description":"","content":"🔧 1. AWS Amplify Mục đích: Triển khai và tự động hóa CI/CD cho frontend (React.js)\nChức năng:\nTự động build \u0026amp; deploy frontend từ GitHub.\nHỗ trợ preview từng pull request.\nCấu hình môi trường (dev, staging, production) dễ dàng.\n🖥 2. Amazon EC2 (Elastic Compute Cloud) Mục đích: Chạy server backend (Node.js + Express).\nChức năng:\nTạo máy chủ ảo (instance) có thể cấu hình linh hoạt.\nTriển khai backend thủ công hoặc tự động từ CodePipeline.\nDễ dàng mở rộng hoặc thu nhỏ tài nguyên theo tải thực tế.\n🔄 3. Amazon API Gateway Mục đích: Quản lý và định tuyến các yêu cầu API giữa frontend và backend.\nChức năng:\nTạo, quản lý và bảo mật các endpoint API cho ứng dụng. Hỗ trợ REST API và WebSocket API, phù hợp cho giao tiếp thời gian thực. Kết hợp với backend chạy trên EC2 để xử lý yêu cầu. "},{"uri":"/vi/4-networking/4.3-igw/","title":"Internet Gateway","tags":[],"description":"","content":"Hướng dẫn Truy cập dịch vụ VPC\nChọn Internet Gateways từ menu bên trái Nhấn Create internet gateway\nCấu hình Internet Gateway\nTrong trường Name tag, nhập CloudTalkr-IGW Nhấn Create internet gateway\nXác nhận Internet Gateway đã được tạo thành công\nGắn vào VPC Gắn Internet Gateway vào VPC của bạn\nNhấn Actions Chọn Attach to VPC Chọn VPC CloudTalkr-VPC từ danh sách thả xuống (VPC ID sẽ tự động điền) Nhấn Attach internet gateway\nXác nhận trạng thái Sau khi gắn thành công:\nState của Internet Gateway sẽ chuyển sang Attached IGW đã sẵn sàng để định tuyến lưu lượng internet cho VPC của bạn\n"},{"uri":"/vi/3-budget/","title":"Tạo Budget","tags":[],"description":"","content":"Tổng quan Trong phần này, bạn sẽ học cách tạo AWS Budget sử dụng template có sẵn của AWS. AWS Budget là công cụ quan trọng giúp bạn theo dõi và kiểm soát chi phí AWS một cách hiệu quả. Tạo Budget theo template\nTạo Budget theo template Truy cập vào AWS Management Console:\nMở AWS Management Console\nTìm và chọn dịch vụ AWS Billing and Cost Management\nTrong giao diện AWS Billing and Cost Management:\nChọn Budgets từ menu bên trái\nNhấn vào Create a budget Thiết lập cấu hình Budget:\nChọn Use a template (simplified) để sử dụng mẫu có sẵn\nTrong phần Templates, chọn Monthly cost budget Nhập thông tin chi tiết cho Budget:\nĐặt tên cho Budget\nXác định số tiền ngân sách hàng tháng\nThiết lập ngưỡng cảnh báo\nNhấn Create budget để hoàn tất Xác nhận Budget đã được tạo thành công:\nLợi ích của việc sử dụng AWS Budget Templates AWS Budget Templates giúp đơn giản hóa quá trình tạo ngân sách bằng cách cung cấp các cấu hình được định nghĩa trước cho các trường hợp sử dụng phổ biến.\nSử dụng Monthly cost budget là lựa chọn tốt để bắt đầu, nhưng hãy cân nhắc tạo thêm các budget theo dịch vụ cụ thể khi hệ thống của bạn phát triển.\nĐảm bảo thiết lập quyền truy cập phù hợp cho AWS Budget để chỉ những người có thẩm quyền mới có thể chỉnh sửa hoặc xóa các budget đã tạo.\nCác cảnh báo budget không tự động dừng tài nguyên hoặc ngăn chặn việc sử dụng dịch vụ khi vượt quá ngân sách. Hãy cân nhắc kết hợp với AWS Service Quotas hoặc IAM policies để kiểm soát việc sử dụng tài nguyên.\n"},{"uri":"/vi/2-prerequiste/2.3-install-vscode/","title":"Cài Đặt VSCode","tags":[],"description":"","content":"Tổng quan Bạn một IDE nào đó có các plug-ins hỗ trợ các loại ngôn ngữ cho thuận tiện trong việc viết: Visual Studio Code, Atom, Notepad++,…\nCác plug-ins theo IDE: Nghiễm nhiên sẽ cần plug-ins dành cho Markdown (như Markdown All in One, Markdown TOC,…). Mỗi khi viết 1 file ngôn ngữ gì thì, VS Code cũng gợi ý cài cái plug-ins liên quan nên không phải lo lắng\nNội dung Truy cập vào Visual Studio Code để tải IDE. Truy cập vào trang Document để xem thông tin chi tiết và sử dụng các plugin "},{"uri":"/vi/4-networking/4.4-routetable/","title":"Route Table","tags":[],"description":"","content":"Tổng quan Route Table (Bảng định tuyến) xác định cách lưu lượng mạng được điều hướng trong một VPC Nó quyết định đường đi của các gói tin giữa các subnet và internet Cho phép kiểm soát lưu lượng vào/ra của VPC Hướng dẫn Truy cập dịch vụ VPC\nChọn Route Tables từ menu bên trái Chọn Route Table của CloudTalkr-VPC\nThêm tuyến đường cho Internet Gateway\nNhấn Actions Chọn Edit routes\nThêm tuyến đường mới\nNhấn Add route Destination: Nhập 0.0.0.0/0 (đại diện cho internet) Target: Chọn Internet Gateway và chọn IGW đã tạo trước đó Nhấn Save changes\n"},{"uri":"/vi/2-prerequiste/2.4-install-postman/","title":"Cài đặt Postman","tags":[],"description":"","content":"Tổng quan Postman là công cụ hỗ trợ kiểm thử API phổ biến nhất hiện nay. Nó cho phép lập trình viên:\nGửi request (GET, POST, PUT, DELETE, PATCH) đến server backend.\nĐính kèm header, body, token để kiểm tra xác thực.\nQuan sát trực tiếp phản hồi từ API.\nLưu lại các tập request theo collection để dùng nhiều lần.\nTrong đề tài này, Postman được dùng để:\nKiểm tra hoạt động của các API do backend Express cung cấp. Nội dung Truy cập trang chủ chính thức của Postman: https://www.postman.com/downloads/\nChọn đúng hệ điều hành và tải về:\nWindows: file .exe\nmacOS: file .zip hoặc .dmg\nLinux: file .tar.gz hoặc AppImage\nCài đặt như phần mềm thông thường. Sau khi mở Postman, bạn có thể đăng nhập tài khoản (hoặc chọn \u0026ldquo;Skip and take me to the app\u0026rdquo;).\nGiao diện chính của Postman bao gồm:\nRequest URL: nơi nhập endpoint API.\nMethod: chọn phương thức HTTP (GET, POST,…).\nHeaders: thêm thông tin như Authorization: Bearer [token].\nBody: dùng với POST/PUT để gửi dữ liệu JSON.\nTạo Collection riêng cho dự án để lưu các request dùng nhiều lần (vd: Login, Get All Projects, Create Task,\u0026hellip;)\n"},{"uri":"/vi/1-introduce/1.4-systemarchitecture/","title":"Kiến trúc Hệ thống","tags":[],"description":"","content":"Hệ thống tuân theo mô hình kiến trúc Client – Server – Cloud, kết hợp giữa các công nghệ thời gian thực (qua GetStream), RESTful API và hạ tầng cloud-native để đảm bảo khả năng mở rộng, hiệu suất và dễ bảo trì. Cả backend và frontend đều được triển khai trên nền tảng AWS.\nCác thành phần của hệ thống Frontend – Giao diện người dùng (React.js) Giao diện người dùng tương tác (UI/UX) Giao tiếp với backend thông qua REST API và GetStream SDK Được triển khai bằng AWS Amplify CI/CD Các chức năng chính bao gồm: Xác thực người dùng (đăng ký/đăng nhập) Nhắn tin thời gian thực (1-1) Truyền phát hoặc gọi video (qua GetStream Video) Quản lý nhóm/kênh trò chuyện Backend – Máy chủ (Node.js + Express.js) Xử lý logic lõi: xác thực, quản lý người dùng \u0026amp; nhóm, tích hợp chat, đồng bộ dữ liệu Sử dụng Prisma ORM để thao tác với MongoDB Được triển khai trên Amazon EC2 Cơ sở dữ liệu – MongoDB Atlas Cơ sở dữ liệu NoSQL lưu trữ trên cloud Lưu trữ thông tin người dùng, lịch sử chat, dữ liệu nhóm, phiên video Có khả năng mở rộng cao và tối ưu cho ứng dụng thời gian thực Lưu trữ Media – Cloudinary Lưu trữ và phân phối nội dung media (ảnh, video) thông qua CDN Tích hợp với hệ thống chat để gửi avatar, chia sẻ hình ảnh, xem trước video, v.v. Sơ đồ hệ thống Kiến trúc tổng thể (AWS Architecture) Quy trình hoạt động "},{"uri":"/vi/4-networking/","title":"Thiết Lập Mạng","tags":[],"description":"","content":"🛰️ Tổng quan về AWS Networking Hệ thống AWS Networking được xây dựng dựa trên VPC (Virtual Private Cloud) – một mạng ảo được cô lập logic trong môi trường đám mây AWS.\nViệc thiết lập các thành phần mạng cốt lõi như VPC, Subnet, Internet Gateway và Route Table là nền tảng để triển khai an toàn các dịch vụ như EC2 và nhiều dịch vụ khác.\nVPC – Virtual Private Cloud Hoạt động như một mạng riêng trong AWS. Cho phép bạn định nghĩa dải địa chỉ IP, cài đặt DNS, quyền truy cập và các quy tắc định tuyến. Là lớp cơ sở chứa các subnet, gateway và các tài nguyên bảo mật. Subnet – Phân đoạn mạng Chia VPC thành các không gian địa chỉ nhỏ hơn, phân bố trên các Availability Zones (AZs). Có thể được cấu hình là Public (truy cập internet) hoặc Private (chỉ nội bộ). Cho phép bố trí tài nguyên như EC2 và RDS một cách logic và an toàn. Internet Gateway (IGW) Cổng kết nối VPC với internet. Phải được gắn vào VPC để cho phép subnet công khai giao tiếp ra ngoài. Hỗ trợ giao tiếp hai chiều cho các tài nguyên có thể truy cập từ internet. Route Table – Bảng định tuyến Xác định cách lưu lượng mạng được định tuyến trong VPC. Ánh xạ lưu lượng tới các đích như Internet Gateway, các subnet khác hoặc kết nối VPN. Mỗi subnet phải được liên kết với một bảng định tuyến phù hợp với chức năng của nó (public/private). ✅ Tóm tắt Thành phần Mô tả VPC Mạng riêng được cô lập, chứa tất cả các tài nguyên mạng khác Subnet Chia nhỏ VPC và giới hạn phạm vi hiển thị/truy cập của tài nguyên Internet Gateway Kết nối VPC với internet để giao tiếp vào/ra Route Table Kiểm soát luồng dữ liệu bằng cách định nghĩa đường đi trong và ngoài VPC "},{"uri":"/vi/2-prerequiste/2.5-prepare-monggodb/","title":"Chuẩn Bị MongoDB","tags":[],"description":"","content":"Tổng quan MongoDB là một cơ sở dữ liệu NoSQL phổ biến, hướng tài liệu (document-oriented), được thiết kế để đạt hiệu năng cao, khả năng mở rộng và linh hoạt.\nThay vì lưu trữ dữ liệu trong bảng và hàng như cơ sở dữ liệu quan hệ, MongoDB lưu trữ dữ liệu dưới dạng tài liệu JSON-like (định dạng BSON), cho phép cấu trúc lồng nhau và lược đồ động (dynamic schema).\nMongoDB được sử dụng rộng rãi trong các ứng dụng hiện đại vì:\nXử lý tốt khối lượng lớn dữ liệu không có cấu trúc hoặc bán cấu trúc. Dễ dàng mở rộng bằng phân mảnh ngang (sharding) và nhân bản (replication). Tích hợp linh hoạt với nhiều ngôn ngữ lập trình và framework. Hướng dẫn Truy cập MongoDB: https://www.mongodb.com/\nChọn đăng nhập bằng Google\nTrong giao diện MongoDB\nChọn Create\nCấu hình cụm cơ sở dữ liệu (cluster settings)\nChọn phiên bản Free\nChọn AWS Provider Chọn vùng (Region): Hong Kong (ap-east-1)\nCấu hình kết nối\nTạo Database User\nSao chép Username và Password\nNhấn Choose a connection method\nChọn Drivers\nSao chép chuỗi kết nối (connection string) và lưu lại để sử dụng sau\nChuỗi kết nối có dạng:\nmongodb+srv://\u0026lt;your_username\u0026gt;:\u0026lt;your_password\u0026gt;@cluster0.vbxyrhh.mongodb.net/\u0026lt;your_appname\u0026gt;?retryWrites=true\u0026amp;w=majority\u0026amp;appName=Cluster0 Thay thế:\n\u0026lt;your_username\u0026gt; : tên người dùng cơ sở dữ liệu \u0026lt;your_password\u0026gt; : mật khẩu cơ sở dữ liệu \u0026lt;your_appname\u0026gt; : tên cơ sở dữ liệu của bạn "},{"uri":"/vi/5-ec2/","title":"EC2","tags":[],"description":"","content":"Tổng quan Amazon EC2 (Elastic Compute Cloud) là dịch vụ máy chủ ảo của AWS, cho phép bạn chạy ứng dụng một cách linh hoạt và theo nhu cầu. Trong dự án này, EC2 được sử dụng để triển khai ứng dụng backend.\nCác bước chính bao gồm:\nKhởi tạo một EC2 instance: Chọn hệ điều hành, cấu hình thông số phần cứng, tạo key pair và gắn instance vào mạng VPC phù hợp.\nKết nối và thiết lập môi trường: Sử dụng SSH để truy cập instance, cài đặt Node.js, Git và các thư viện cần thiết để chạy backend Node.js.\nQuản lý tiến trình với PM2: Chạy máy chủ ở chế độ nền và kích hoạt tự khởi động lại khi hệ thống reboot.\n"},{"uri":"/vi/6-amplify/","title":"Amplify","tags":[],"description":"","content":" Truy cập AWS Management Console Tìm kiếm AWS Amplify Chọn AWS Amplify từ kết quả tìm kiếm\nNhấn Deploy An App Bắt đầu xây dựng với Amplify:\nChọn GitHub Nhấn Next\nThêm repository và branch:\nChọn repo CloudTalkr Tick My app is a monorepo Monorepo root directory: frontend Nhấn Next\nCài đặt ứng dụng:\nKey: VITE_BACKEND_URL Value: \u0026lt; Public IPv4 Address :3000\u0026gt; Nhấn Next\nXem lại cấu hình:\nNhấn Save and Deploy\nMở EC2 và thêm: FRONTEND_URL=\u0026lt;Amplify_Url\u0026gt; vào file .env\n"},{"uri":"/vi/2-prerequiste/2.6-prepare-cloudinary/","title":"Chuẩn Bị Cloudinary","tags":[],"description":"","content":"Tổng quan Cloudinary là một dịch vụ đám mây dùng để quản lý hình ảnh và video, cung cấp khả năng lưu trữ, tối ưu hóa và phân phối thông qua Mạng phân phối nội dung (CDN) toàn cầu. Dịch vụ này được sử dụng rộng rãi trong các ứng dụng hiện đại nhằm đơn giản hóa quá trình xử lý media, từ việc tải lên, chuyển đổi cho đến phân phối các tệp được tối ưu hóa trên nhiều thiết bị và mạng khác nhau. Hướng dẫn Truy cập Cloudinary: https://cloudinary.com/\nNhấn Login\nTrong giao diện đăng nhập\nĐăng nhập bằng Google\nTrong giao diện người dùng\nNhấn Go to API Keys\nSao chép Cloud Name, API Key, API Secret và lưu lại để sử dụng sau\n"},{"uri":"/vi/7-api-gateway/","title":"API Gateway","tags":[],"description":"","content":" Truy cập AWS Management Console Tìm kiếm API Gateway Chọn API Gateway từ kết quả tìm kiếm\nĐiều hướng đến phần REST API Nhấn Build\nTạo một REST API Chọn New API API name: cloudtalkr-API Nhấn Create API\nMở phần Resources\nNhấn Create Resource Bật Proxy Resource Resource name: {proxy+} Tick CORS (Cross-Origin Resource Sharing) Nhấn Create Resource\nTrong phần Resource Methods Chọn ANY Nhấn Edit integration Integration Type: HTTP Bật HTTP proxy integration HTTP Method: ANY Endpoint URL: \u0026lt;Public IPv4 Address\u0026gt;/{proxy} Content handling: Passthrough Nhấn Save\nTriển khai API Stage: New stage Stage name: prod Nhấn Deploy\nKiểm tra API\nAPI hoạt động đúng nhưng bị chặn bởi middleware\nTruy cập lại AWS Management Console Tìm kiếm AWS Amplify Chọn AWS Amplify từ kết quả tìm kiếm Nhấn View app - CloudTalkr Mở Environment Variables Nhấn Manage Variables Cập nhật Value của biến VITE_BACKEND_URL\nNhấn Save\nVào Overview Nhấn Redeploy this version\n"},{"uri":"/vi/2-prerequiste/2.7-prepare-getstream/","title":"Chuẩn bị Getstream","tags":[],"description":"","content":"Tổng quan GetStream.io là một dịch vụ đám mây cung cấp API và SDK để xây dựng các luồng hoạt động (activity feeds), tin nhắn trò chuyện (chat messaging) và các tính năng mạng xã hội theo thời gian thực với khả năng mở rộng cao. Dịch vụ này được thiết kế nhằm giúp lập trình viên nhanh chóng tích hợp các chức năng thời gian thực phức tạp mà không cần tự xây dựng hạ tầng backend từ đầu. Hướng dẫn Truy cập GetStream: https://getstream.io/\nNhấn Login\nTrong giao diện đăng nhập\nChọn đăng nhập bằng Google\nCấu hình tài khoản khi đăng nhập lần đầu\nNhập tên tổ chức (Organization name), email, và địa chỉ website (Website URL)\nTrong giao diện người dùng\nNhấn vào tên ứng dụng của bạn\nSao chép API Key, Secret Key và lưu lại để sử dụng sau\n"},{"uri":"/vi/8-achievements/","title":"Thành Tựu","tags":[],"description":"","content":"Trang Đăng Nhập Trang Đăng Ký Trang Chủ Trang Bạn Bè Trang Thông BáoBáo Trang Chat Trang Stream (Gọi) "},{"uri":"/vi/9-cleanup/","title":"Dọn dẹp tài nguyên  ","tags":[],"description":"","content":"Chúng ta sẽ thực hiện các bước sau để xóa các tài nguyên đã tạo trong bài thực hành này.\nXóa Amplify Truy cập AWS Amplify Console\nMở AWS Amplify Console Trong danh sách ứng dụng, chọn ứng dụng bạn muốn xóa Mở phần cài đặt ứng dụng\nTại trang chi tiết ứng dụng, chọn tab App settings Nhấn General để xem các cài đặt chung Xóa ứng dụng\nCuộn xuống và nhấn Delete app Nhập tên ứng dụng để xác nhận Nhấn Delete để hoàn tất\nXóa EC2 instance Truy cập Bảng điều khiển quản lý EC2\nNhấn Instances Chọn instance Nhấn Instance state Chọn Terminate instance, sau đó nhấn Terminate để xác nhận\nSau đó chuyển sang Security Group và xóa Security Group của EC2\nXóa API Gateway Truy cập Amazon API Gateway\nMở API Gateway Console Chọn APIs ở thanh điều hướng bên trái Chọn API để xóa\nTìm API bạn muốn xóa (HTTP, REST hoặc WebSocket) Nhấn vào tên API để mở chi tiết Thực hiện xóa\nNhấn Actions \u0026gt; Delete Nhập tên API để xác nhận (nếu được yêu cầu) Nhấn Delete để hoàn tất\nXóa VPC Truy cập Bảng điều khiển quản lý VPC\nNhấn Your VPCs Chọn Lab VPC Nhấn Actions Chọn Delete VPC Trong hộp xác nhận, nhập delete để xác nhận, sau đó nhấn Delete để xóa Lab VPC và các tài nguyên liên quan (Subnets, Internet Gateway,\u0026hellip;)\n"},{"uri":"/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]