[{"uri":"/2-prerequiste/2.1-code-clone/","title":"Code Cloning","tags":[],"description":"","content":"Overview The CloudTalkr project is pre-built and hosted on GitHub. Cloning the source code to your local machine allows you to edit, install dependencies, and test the application locally (localhost).\nThe source code includes all components: frontend, backend, Prisma configuration, images, system diagrams, and AWS deployment configuration files.\nüëâ Main repository: https://github.com/nhat3107/CloudTalkr Instructions Open Terminal, Git Bash, or Command Prompt (for Windows users).\nRun the following command to clone the entire source code to your local machine:\ngit clone https://github.com/nhat3107/CloudTalkr.git "},{"uri":"/","title":"Development and Deployment","tags":[],"description":"","content":"Building a Real-Time Chat \u0026amp; Video Streaming Application with MERN Stack and Deploying on AWS Project Objectives This project aims to develop a real-time chat and video streaming application using the MERN Stack, while implementing on AWS infrastructure. The application combines a modern user interface with real-time communication capabilities and secure deployment on the cloud.\nTechnologies Used üßë‚Äçüíª Development Stack ‚Äì MERN Frontend:\nReact.js Tailwind CSS, DaisyUI GetStream.io (real-time chat and video handling) Backend:\nNode.js + Express.js Prisma ORM MongoDB Atlas (cloud database) Cloudinary (media storage and delivery) ‚òÅÔ∏è Deployment Stack ‚Äì AWS Services CI/CD for Frontend:\nAWS Amplify ‚Äì Automatically builds, deploys, and hosts the React frontend from GitHub. Backend:\nEC2 ‚Äì Automatically builds and deploys the Express.js backend to Amazon EC2. üìÇ Source Code Management GitHub ‚Äì Manages source code and triggers CI/CD workflows. Expected Outcomes A fully functional real-time chat and video streaming application. A modern, smooth, and responsive user interface across all devices. A scalable, cloud-native architecture that is easy to maintain and upgrade in the future. Contents Introduction Prerequisites Create Budget Networking Amplify CodePipeline Achievements Resource Cleanup "},{"uri":"/1-introduce/","title":"Introduction","tags":[],"description":"","content":"üìò Overview Introduction This project focuses on building a real-time web application that supports chat and video streaming, developed using the MERN stack (MongoDB, Express.js, React.js, Node.js). The system emphasizes not only a fast and intuitive user experience but also scalability, automated deployment, and robust cloud-based operation using modern AWS services.\nThe application is designed following a Client ‚Äì Server ‚Äì Cloud architecture, where the frontend and backend are developed separately but work seamlessly together via APIs, real-time services (GetStream), cloud databases.\nContent:\n1.1 Project Topic 1.2 Technologies and Development Tools 1.3 AWS Services 1.4 System Architecture Overall, the project delivers not only a modern, full-featured web application but also a scalable and production-ready cloud-native system.\n"},{"uri":"/5-ec2/5.1-launchec2/","title":"Launching EC2","tags":[],"description":"","content":"Instance Configuration Go to the EC2 Dashboard\nSearch for the EC2 service\nSelect EC2 from the search results Launch a new Instance\nSelect Instances from the left-hand menu\nClick Launch instances Set the Instance Name\nUnder Name and tags, enter cloudtalkr-server Choose Amazon Machine Image (AMI)\nSelect Quick Start\nChoose Amazon Linux 2023 kernel-6.1\nPick a suitable AMI version Configure Instance Type and Key Pair\nChoose an appropriate Instance type\nClick Create new key pair Create a new Key Pair\nKey pair name: cloudtalkr-keypair\nKey pair type: Select RSA\nPrivate key format: Select .pem Network Settings Configure Network\nVPC: Select the CloudTalkr-VPC VPC\nSubnet: Select Public Subnet 1\nAuto-assign public IP: Select Enable\nSecurity Group: Choose Create Security Group\nSecurity Group Name: CloudTalkr-sg\nDescription: CloudTalkr Secutity Group\nRemember to set up these Inbound Rules\nRemember to open Custom TCP for PORT 3000 FROM 0.0.0.0: just use for lab/test, dangerous for production environment\nClick Launch instance Confirm the instance was launched successfully Connect Access the EC2 service:\nMany kind of connection tools could be used, but this lab uses MobaXterm.\nMobaXterm Guideline Here\nClick Instances\nSelect cloudtalkr-server Copy Public IP and connect to this instance "},{"uri":"/1-introduce/1.1-projecttopic/","title":"Project Topic","tags":[],"description":"","content":"This project focuses on building a real-time Chat and Video Streaming Web Application using the MERN stack on AWS infrastructure to ensure high availability, scalability, and rapid deployment.\nCore Features Register, log in, and manage their accounts securely using authentication services\nSend and receive real-time messages in one-on-one chats using GetStream.io\nCreate and join live video sessions with minimal latency\nUpload and manage media (images, videos) with cloud-based hosting via Cloudinary\nEnjoy seamless communication through an intuitive UI with responsive design\nCollaborate in real-time with automatic message syncing and live stream updates\nThe app is designed as a fully web-based solution, optimized for modern browsers, and built for easy scaling and deployment on cloud infrastructure.\nKey Technologies and Services Used Frontend:\nüëâ React.js üëâ Tailwind CSS + DaisyUI üëâ GetStream.io (for chat \u0026amp; video) Backend:\nüëâ Node.js + Express.js üëâ Prisma ORM Database:\nüëâ MongoDB Atlas Cloud Media Handling:\nüëâ Cloudinary (Image \u0026amp; Video CDN) CI/CD and Cloud Deployment ‚Äì AWS Services:\nüëâ AWS Amplify (CI/CD for React frontend) üëâ AWS EC2 (host backend server) üëâ AWS API Gateway "},{"uri":"/4-networking/4.1-vpc/","title":"VPC","tags":[],"description":"","content":"Objective Create a separate virtual network environment in AWS Define the IP address range for the VPC Configure basic DNS features Instructions Access the AWS Management Console\nSearch for the VPC service Select VPC from the search results In the VPC Dashboard\nSelect Your VPCs from the left menu Click Create VPC Configure VPC parameters\nResources: Select VPC only Name tag: Enter CloudTalkr-VPC IPv4 CIDR: Enter 10.0.0.0/16 Keep the Tenancy option as Default. Switching to Dedicated may restrict the types of EC2 Instances supported in this VPC.\nConfirm VPC creation\nClick Create VPC to complete the process Verify VPC status after creation Enable DNS features for the VPC\nClick Edit VPC settings Go to the DNS settings tab Enable DNS hostnames and DNS resolution Save changes "},{"uri":"/5-ec2/5.2-deployingbackend/","title":"Deploying Backend","tags":[],"description":"","content":"Environment Preparation Install NVM (Node Version Manager). curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | Reload the shell to use nvm: . ~/.nvm/nvm.sh Install the latest Node.js version: nvm install node Check installed versions of Node and npm: node -v npm -v Install Git and Clone Project Update system and install Git: sudo yum update -y sudo yum install git -y Check Git version:\ngit --version Clone the project source code from GitHub: git clone https://github.com/nhat3107/CloudTalkr.git Navigate to the backend folder: ls cd CloudTalkr/backend Install and Run the Server Install npm packages for the backend: npm i Create .env file - Paste the API keys, Database Url,\u0026hellip; Start server using the new .env configuration: npm run start Install and Configure PM2 for Background Process\nInstall PM2 to manage Node.js processes:\nnpm i pm2 -g Enable PM2 to auto-start on system boot: pm2 startup Paste the code appeare and run.\nStart the server with PM2, check status, and monitor:\npm2 start ecosystem.config.cjs pm2 status pm2 monit Stop and delete all current PM2 processes: pm2 stop all pm2 delete all Restart the server from the config: pm2 start ecosystem.config.cjs API Test "},{"uri":"/2-prerequiste/","title":"Preparation Steps","tags":[],"description":"","content":"Overview Before running the CloudTalkr application, you need to prepare all required tools, libraries, and environment configurations for both frontend and backend. This section guides you through the necessary setup steps on your local machine.\nStep-by-step Checklist ‚úÖ 2.1 ‚Äì Clone the Source Code Use git clone to download the full source code from GitHub. Repository: üëâ https://github.com/nhat3107/CloudTalkr ‚úÖ 2.2 ‚Äì Install Node.js Required to run both the frontend (Reactjs) and backend (ExpressJs). Comes with npm for managing packages. ‚úÖ 2.3 ‚Äì Install Visual Studio Code Recommended IDE for editing and managing the source code. Install plugins for Markdown, JavaScript/TypeScript, Prisma, etc. ‚úÖ 2.4 ‚Äì Install Postman Tool to test API endpoints (GET, POST, PUT, DELETE). ‚úÖ 2.5 ‚Äì Prepare MongoDB Database for this system. ‚úÖ 2.6 ‚Äì Prepare Cloudinary CDN for this system ‚úÖ 2.7 ‚Äì Prepare Getsream Service that provides APIs and SDKs for building scalable, real-time chat messaging, and video streaming. üëâ Once these steps are completed, you\u0026rsquo;re ready to proceed with project configuration, database setup, and system deployment.\n"},{"uri":"/4-networking/4.2-subnet/","title":"Subnet","tags":[],"description":"","content":"Overview A subnet is a smaller network segment within a VPC Allows distribution of resources across Availability Zones (AZ) Instructions Go to the VPC service\nSelect Subnets from the left-hand menu Click Create subnet Select a VPC\nIn the Create subnet screen Choose the CloudTalkr-VPC VPC created earlier Configure the first subnet\nSubnet name: Enter Public Subnet 1 Availability Zone: Choose ap-southeast-1a IPv4 CIDR block: Enter 10.0.0.0/24 Click Create subnet Confirm the subnet was created successfully Availability Zone (AZ): Human-readable name (e.g., ap-southeast-1a)\nAZ ID: The actual identifier for the AZ\nAWS maps AZ names to AZ IDs differently for each account to distribute resource allocation more evenly.\n"},{"uri":"/1-introduce/1.2-technologiesandtools/","title":"Technologies And Development Tools","tags":[],"description":"","content":"üñ•Ô∏è Frontend React.js: A modern JavaScript library for building fast, dynamic user interfaces.\nTailwind CSS + DaisyUI: Utility-first CSS framework combined with a UI component library for building responsive, attractive layouts with ease.\nGetStream.io: A powerful SDK and API service to build real-time messaging and video experiences with minimal backend logic.\nReact Router: Handles dynamic routing in the single-page application.\nAxios / Fetch API: Manages communication between frontend and backend.\n‚öôÔ∏è Backend Node.js \u0026amp; Express.js: Provides a lightweight, flexible backend server to handle APIs, authentication, and messaging logic.\nPrisma ORM: Simplifies interaction with the MongoDB database, offering type-safe, readable, and maintainable queries.\nMongoDB Atlas: A cloud-hosted NoSQL database that scales automatically and stores user, chat, and session data.\nCloudinary: Stores and serves image and video content efficiently via CDN, reducing backend load.\n‚òÅÔ∏è Cloud \u0026amp; CI/CD Infrastructure (AWS) AWS Amplify: Automates CI/CD for the React frontend, from code commit to deployment.\nAmazon EC2: Hosts the Node.js backend with full control over the deployment environment.\nAWS API Gateway: Manages and routes API requests between the frontend and backend, enabling secure, scalable, and monitored API endpoints.\nüß™ Development Tools Postman: Tests API endpoints and simulates frontend/backend communication.\nMongoDB Atlas: GUI tool for querying and managing the MongoDB database visually.\nGitHub: Source code hosting, version control, and CI/CD integration.\nVisual Studio Code: Code editor with rich plugin support for JavaScript, React, and Node.js development.\n"},{"uri":"/2-prerequiste/2.2-install-nodejs/","title":"Installing Nodejs","tags":[],"description":"","content":"Overview NodeJs is a server-side JavaScript runtime environment used to build the backend of this project. The backend leverages Node.js along with Express to handle APIs and connect to the database.\nIn addition to Node.js, the system also requires npm (Node Package Manager) ‚Äî a tool for managing and installing dependencies for both frontend and backend.\nBoth the frontend (ReactJs) and backend (ExpressJs) require NodeJs to run and develop locally.\nInstructions Go to the official Node.js download page: https://nodejs.org/en\nSelect the LTS (Long Term Support) version suitable for your operating system:\nWindows: .msi installer macOS: .pkg installer Linux: choose the version that matches your distro Download and install it like any other software (Next ‚Üí Next ‚Üí Install\u0026hellip;).\nVerify the installation by opening Terminal or Command Prompt and running:\nnode -v npm -v "},{"uri":"/1-introduce/1.3-awsservices/","title":"AWS Services","tags":[],"description":"","content":"üîß 1. AWS Amplify Purpose: CI/CD deployment for the React.js frontend\nFunctions:\nAutomatically builds and deploys the frontend from GitHub.\nProvides preview environments for pull requests.\nEasy management of multiple environments (dev, staging, production).\nüñ• 2. Amazon EC2 (Elastic Compute Cloud) Purpose: Hosting the Node.js + Express backend server\nFunctions:\nLaunch customizable virtual server instances.\nDeploy backend manually or through CodePipeline.\nEasily scale instances up or down based on traffic.\nüîÑ 3. Amazon API Gateway Purpose: Manage and route API requests between the frontend and backend.\nFunctions:\nCreate, manage, and secure API endpoints for the application. Support both REST APIs and WebSocket APIs for real-time communication. Integrate with AWS Lambda or backend hosted on EC2 to handle requests. "},{"uri":"/4-networking/4.3-igw/","title":"Internet Gateway","tags":[],"description":"","content":"Overview An Internet Gateway (IGW) is a VPC component that enables internet connectivity Acts as a bridge between your VPC and the internet Supports bidirectional communication for resources inside the VPC Instructions Go to the VPC service\nSelect Internet Gateways from the left-hand menu Click on Create internet gateway Configure the Internet Gateway\nIn the Name tag field, enter CloudTalkr-IGW Click Create internet gateway Confirm the Internet Gateway was created successfully Attach to VPC Attach the Internet Gateway to your VPC\nClick Actions Choose Attach to VPC Select the CloudTalkr-VPC VPC from the dropdown (VPC ID will auto-fill) Click Attach internet gateway Confirm Status Once attached:\nThe State of the Internet Gateway will change to Attached The IGW is now ready to route internet traffic for your VPC "},{"uri":"/3-budget/","title":"Creating Budget","tags":[],"description":"","content":"Overview In this section, you will learn how to create an AWS Budget using AWS‚Äôs predefined templates. AWS Budget is an essential tool that helps you monitor and control your AWS spending effectively.\nCreate a Budget using a Template Access the AWS Management Console:\nOpen the AWS Management Console Search for and select AWS Billing and Cost Management In the AWS Billing and Cost Management interface:\nSelect Budgets from the left menu Click on Create a budget Configure your budget settings:\nSelect Use a template (simplified) to use a predefined template Under Templates, choose Monthly cost budget Enter the budget details:\nName your Budget Specify the monthly amount Set up alert thresholds Click Create budget to complete the setup Confirm that the budget was successfully created:\nBenefits of Using AWS Budget Templates AWS Budget Templates simplify the budgeting process by offering predefined configurations for common use cases.\nUsing the Monthly cost budget is a good starting point, but consider creating additional budgets for specific services as your system scales.\nMake sure to set appropriate access permissions for AWS Budgets so that only authorized users can edit or delete created budgets.\nBudget alerts do not automatically stop resources or prevent service usage when the budget is exceeded. Consider combining with AWS Service Quotas or IAM policies to enforce usage controls.\n"},{"uri":"/2-prerequiste/2.3-install-vscode/","title":"Installing VSCode","tags":[],"description":"","content":"Overview Choose an IDE that supports plug-ins for various languages to make development more convenient, such as Visual Studio Code, Atom, Notepad++, etc.\nPlug-ins by IDE: Naturally, you will need plug-ins for Markdown (such as Markdown All in One, Markdown TOC, etc.). When working with any language, VS Code will usually suggest the relevant plug-ins, so there\u0026rsquo;s no need to worry.\nInstructions Visit Visual Studio Code to download the IDE. Visit the Documentation page for detailed information and guidance on using extensions. "},{"uri":"/4-networking/4.4-routetable/","title":"Route Table","tags":[],"description":"","content":"Overview A Route Table defines how network traffic is directed within a VPC It determines the paths that packets take between subnets and the internet Enables control over inbound/outbound traffic in your VPC Instructions Access the VPC service\nSelect Route Tables from the left-hand menu Select Route Table of CloudTalkr-VPC Add route for Internet Gateway\nClick Actions Select Edit routes Add new route\nClick Add route Destination: Enter 0.0.0.0/0 (represents internet) Target: Select Internet Gateway and choose the previously created IGW Click Save changes "},{"uri":"/4-networking/","title":"AWS NETWORKING","tags":[],"description":"","content":"üõ∞Ô∏è Overview of AWS Networking The AWS Networking system is built around VPC (Virtual Private Cloud) ‚Äì a logically isolated virtual network in the AWS cloud. Setting up core networking components such as VPC, Subnets, Internet Gateway, and Route Tables is foundational for securely deploying services like EC2 and more.\nVPC ‚Äì Virtual Private Cloud Acts as a private network within AWS. Allows you to define IP address ranges, DNS settings, access control, and routing rules. Serves as the base layer containing subnets, gateways, and security resources. Subnet ‚Äì Network Segmentation Divides the VPC into smaller address spaces, distributed across Availability Zones (AZs). Can be configured as Public (internet-facing) or Private (internal only). Enables logical and secure placement of resources like EC2 and RDS. Internet Gateway (IGW) A gateway that connects the VPC to the internet. Must be attached to a VPC to allow public subnets to communicate externally. Supports two-way communication for internet-accessible resources. Route Table Defines how network traffic is routed within a VPC. Maps traffic to destinations such as an Internet Gateway, other subnets, or VPN connections. Each subnet must be associated with a route table that aligns with its function (public/private). ‚úÖ Summary Component Description VPC The isolated network containing all other networking resources Subnet Segments the VPC and scopes the visibility and access of resources Internet Gateway Connects the VPC to the public internet for outbound/inbound communication Route Table Controls traffic flow by defining routing paths within and outside the VPC "},{"uri":"/2-prerequiste/2.4-install-postman/","title":"Installing Postman","tags":[],"description":"","content":"Overview Postman is one of the most popular tools for testing APIs. It allows developers to:\nSend HTTP requests (GET, POST, PUT, DELETE, PATCH) to the backend server. Add headers, body, and tokens to test authentication. View API responses directly. Save requests into collections for reuse. In this project, Postman is used to:\nTest the functionality of APIs provided by the Express backend. Instructions Visit the official Postman download page:\nüëâ https://www.postman.com/downloads/\nChoose the correct version for your operating system:\nWindows: .exe installer macOS: .zip or .dmg file Linux: .tar.gz or AppImage Install the application as you would any standard software.\nAfter launching Postman, you can sign in (or click ‚ÄúSkip and take me to the app‚Äù).\nThe main Postman interface includes:\nRequest URL: where you input the API endpoint. Method: select HTTP method (GET, POST, etc.). Headers: add key-value pairs like Authorization: Bearer [token]. Body: used with POST/PUT to send JSON data. Create a dedicated Collection for your project to store frequently used requests (e.g., Login, Get All Projects, Create Task, \u0026hellip;).\n"},{"uri":"/1-introduce/1.4-systemarchitecture/","title":"System Architecture","tags":[],"description":"","content":"The system follows a Client ‚Äì Server ‚Äì Cloud architecture, combining real-time technologies (via GetStream), RESTful APIs, and cloud-native infrastructure to ensure scalability, performance, and maintainability. Both backend and frontend are deployed on AWS platform.\nSystem Components Frontend ‚Äì Client Side (React.js) Interactive user interface (UI/UX)\nCommunicates with the backend via REST APIs and GetStream SDK\nDeployed via AWS Amplify CI/CD\nMain functionalities include:\nUser authentication (sign-up/login)\nReal-time messaging (one-on-one)\nVideo streaming or calling (via GetStream Video)\nGroup/channel management\nBackend ‚Äì Server Side (Node.js + Express.js) Handles core logic: authentication, user and group management, chat integration, data sync\nUses Prisma ORM to interact with MongoDB\nDeployed on Amazon EC2\nDatabase ‚Äì MongoDB Atlas Cloud-hosted NoSQL database Stores user profiles, chat history, group metadata, video session details Scalable and optimized for real-time applications Media Storage ‚Äì Cloudinary Stores and delivers media content (images, videos) via CDN Integrated with chat for sending avatars, image sharing, video previews, etc. System Diagrams Overall Architecture Diagram (AWS Architecture) WorkFlow "},{"uri":"/5-ec2/","title":"EC2","tags":[],"description":"","content":"Overview Amazon EC2 (Elastic Compute Cloud) is AWS‚Äôs virtual server service that allows you to run applications flexibly and on demand. In this project, EC2 is used to deploy the backend application.\nThe main steps include:\nLaunching an EC2 instance: Select an operating system, configure hardware specs, create a key pair, and attach the instance to the appropriate VPC network.\nConnecting and setting up the environment: SSH into the instance, install Node.js, Git, and required libraries to run a Node.js backend.\nManaging processes with PM2: Run the server in the background and enable automatic restart upon system reboot.\n"},{"uri":"/2-prerequiste/2.5-prepare-monggodb/","title":"Preparing MongoDB","tags":[],"description":"","content":"Overview MongoDB is a popular NoSQL, document-oriented database designed for high performance, scalability, and flexibility. Instead of storing data in tables and rows (like relational databases), MongoDB stores data as JSON-like documents (in BSON format), which allows for nested structures and dynamic schemas.\nMongoDB is widely used in modern applications because:\nIt handles large volumes of unstructured or semi-structured data.\nIt scales easily with horizontal sharding and replication.\nIt integrates seamlessly with many programming languages and frameworks.\nInstructions Access MongoDB: https://www.mongodb.com/\nChoose login by Google In the MongoDB user interface\nChoose Create Configure your cluster settings\nSelect Free version Choose AWS Provider Select Region: Hong Kong(ap-east-1) Configure the connection\nCreate Database User Copy Username and Password\nClick Choose a connection method Choose Drivers Copy connection string and use it later The String should be in this structure\nmongodb+srv://\u0026lt;your_username\u0026gt;:\u0026lt;your_password\u0026gt;@cluster0.vbxyrhh.mongodb.net/\u0026lt;your_appname\u0026gt;?retryWrites=true\u0026amp;w=majority\u0026amp;appName=Cluster0 Replacing:\n\u0026lt;your_usename\u0026gt; : your Database username \u0026lt;your_password\u0026gt;: your Database password \u0026lt;your_appname\u0026gt;: your Database name "},{"uri":"/6-amplify/","title":"Amplify","tags":[],"description":"","content":" Access the AWS Management Console Search for AWS Amplify Select AWS Amplify from the search results Click Deploy An App Start building with Amplify:\nSelect GitHub Click Next Add repository and branch:\nSelect the CloudTalkr repo Check My app is a monorepo Monorepo root directory: frontend Click Next App settings:\nKey: VITE_BACKEND_URL Value: \u0026lt; Public IPv4 Address :3000\u0026gt; Click Next Review:\nClick Save and Deploy\nOpen EC2 and insert: FRONTEND_URL= \u0026lt;Amplify_Url\u0026gt; to .env\n"},{"uri":"/2-prerequiste/2.6-prepare-cloudinary/","title":"Preparing Cloudinary","tags":[],"description":"","content":"Overview loudinary is a cloud-based service for managing images and videos, offering storage, optimization, and delivery through a global Content Delivery Network (CDN). It is widely used in modern applications to simplify media handling, from uploading to transforming and serving optimized assets on various devices and networks. Instructions Access Cloudinary: https://cloudinary.com/\nClick Login In login interface\nLogin by Google In user interface\nClick Go to API Keys Copy Cloud Name, API Key, API Secret and use them later "},{"uri":"/7-api-gateway/","title":"API Gateway","tags":[],"description":"","content":" Access AWS Management Console Search for API Gateway Select API Gateway from the search results Navigate to the REST API section Click Build Create a REST API Select New API API name: cloudtalkr-API Click Create API Navigate to the Resources section Click Create Resource Enable Proxy Resource Resource name: {proxy+} Check CORS (Cross-Origin Resource Sharing) Click Create Resource In the Resource Methods Choose ANY\nClick Edit integration\nIntegration Type: HTTP Enable HTTP proxy integration HTTP Method: ANY Endpoint URL: \u0026lt;Public IPv4 Address\u0026gt;/{proxy} Content handling: Passthrough Click Save Deploy the API Stage: New stage Stage name: prod Click Deploy Test the API API run correctly because be prevented by middleware\nAccess AWS Management Console\nSearch for AWS Amplify Select AWS Amplify from the search results Click View app - CloudTalkr Open Environment Variables Click Manage Variables Update the Value of the variable VITE_BACKEND_URL Click Save Go to Overview Click Redeploy this version "},{"uri":"/2-prerequiste/2.7-prepare-getstream/","title":"Preparing Getstream","tags":[],"description":"","content":"Overview GetStream.io is a cloud-based service that provides APIs and SDKs for building scalable, real-time activity feeds, chat messaging, and social features. It is designed to help developers quickly integrate complex real-time functionality without building backend infrastructure from scratch. Instructions Access Getstream; https://getstream.io/\nClick Login In the login interface\nChoose login by Google Configue your account in first login\nInput your Organization name, Email, Website Url In the user interface\nClick your app name Copy your API key, Secret Key and use them later "},{"uri":"/8-achievements/","title":"Achievements","tags":[],"description":"","content":"Login Page SignUp Page Main Page Friends Page Notifications Page Chat Page Stream Page "},{"uri":"/9-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"We will take the following steps to delete the resources we created in this exercise.\nDelete Amplify Access AWS Amplify Console\nOpen AWS Amplify Console From the application list, choose the app you want to delete Open app settings\nIn the app details page, select the App settings tab Click General to view general settings Delete the app\nScroll down and click Delete app Enter the app name to confirm Click Delete to complete Delete EC2 instance Go to EC2 service management console\nClick Instances. Select the instance Click Instance state. Click Terminate instance, then click Terminate to confirm. Then move to Security Group and Delete EC2\u0026rsquo;s Security Group Delete API GateWay Access Amazon API Gateway\nOpen API Gateway Console Select APIs from the left-hand navigation Select the API to delete\nFind the API you want to delete (HTTP, REST, or WebSocket)\nClick the API name to open details\nDelete\nClick Actions \u0026gt; Delete Confirm by entering the API name (if required) Click Delete to finish Delete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources(Subnets, Internet Gateway\u0026hellip;) "},{"uri":"/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"/tags/","title":"Tags","tags":[],"description":"","content":""}]